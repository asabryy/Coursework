from multiprocessing import connection
from attr import attr

from matplotlib.pyplot import table
from erd import *
from table import *

# This function converts an ERD object into a Database object
# The Database object should correspond to a fully correct implementation
# of the ERD, including both data structure and constraints, such that the
# CREATE TABLE statements generated by the Database object will populate an
# empty MySQL database to exactly implement the conceptual design communicated
# by the ERD.
#
# @TODO: Implement me!

def create_table(name, attr, pkey, fkeys):
    for f in fkeys:
        attr += f[0]
    return Table(name, set(attr), set(pkey), set(fkeys))

def get_fkeys(rel, erd ):
    fkeys = []
    e_relation = []
    if type(rel) == EntitySet:
        for r in rel.connections: #how about go through all entities and check if they are in connections 
            for e in erd.entity_sets:
                for c in e.connections:
                    if (r[0] == c[0]) and (rel.name != e.name):
                        if (r[1] == Multiplicity.MANY) and (c[1] == Multiplicity.ONE):
                            fkeys.append((tuple(e.primary_key), e.name, tuple(e.primary_key)))
                            e_relation.append(r[0]) 

    elif type(rel) == Relationship:
        for e in erd.entity_sets:
            for c in e.connections:
                if c[0] == rel.name and (c[1] == Multiplicity.MANY):
                    e_relation.append(e)
        if len(e_relation) > 1:
            for i in e_relation:
                fkeys.append((tuple(i.primary_key), i.name, tuple(i.primary_key)))
    
    return fkeys, e_relation

def get_weak(rel, erd):
    fkeys = []
    for e in erd.entity_sets:
        for c in e.connections:
            if c[0] in rel.supporting_relations:
                fkeys.append((tuple(e.primary_key), e.name, tuple(e.primary_key)))
                rel.primary_key += e.primary_key
    return fkeys

def create_rel(rel, e_list, fkeys):
    attr = rel.attributes
    pkeys = rel.primary_key
    for e in e_list:
        attr += e.primary_key
        pkeys += e.primary_key
    
    return create_table(rel.name, attr, pkeys, fkeys)

def create_entity(ent, r_list, fkeys, erd):
    attr = ent.attributes
    for r in r_list:
        for rr in erd.relationships:
            if rr.name == r:
                attr += rr.attributes
                ent.primary_key += rr.primary_key
    return create_table(ent.name, attr, ent.primary_key, fkeys)

def convert_to_table( erd ):
    result = []
    for e in erd.entity_sets:
        fkeys, r_rel = get_fkeys(e, erd)
        fkeys += get_weak(e, erd)
        result.append(create_entity(e, r_rel, fkeys, erd,))

    for r in erd.relationships:
        fkeys, e_rel = get_fkeys(r, erd)
        if len(fkeys) != 0:
            result.append(create_rel(r, e_rel, fkeys))
            
            
    #print(get_fkeys(erd.relationships[0], erd))
    #print(Database(result).tables)
    #print(sample_db.tables) 
    return Database(result)

def main():
    # print("Information on sample ERD Object")
    # for r in range(len(sample_erd.relationships)):
    #     print("Relation ship ", r, "called: ",sample_erd.relationships[r].name)
    #     print("with attributes: ",sample_erd.relationships[r].attributes)
    
    # print("")
    # for e in range(len(sample_erd.entity_sets)):
    #     print("Entity set: ",sample_erd.entity_sets[e].name)
    #     print("has attribute(s): ",sample_erd.entity_sets[e].attributes)
    #     print("Primary key(s): ",sample_erd.entity_sets[e].primary_key)
    #     print("Connections: ",sample_erd.entity_sets[e].connections)
    #     print("")
    convert_to_table(T21)

if __name__ == "__main__":
    main()
